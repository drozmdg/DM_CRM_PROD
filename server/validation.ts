/**
 * Validation schemas for API endpoints
 * Using Zod for runtime validation
 */

import { z } from 'zod';

// Customer schemas
export const insertCustomerSchema = z.object({
  name: z.string().min(1, 'Name is required'),
  phase: z.enum([
    'Contracting',
    'New Activation',
    'Steady State',
    'Steady State + New Activation',
    'Pending Termination',
    'Terminated'
  ]),
  logo: z.string().optional(),
  avatarColor: z.string().optional(),
  contractStartDate: z.string().optional(),
  contractEndDate: z.string().optional(),
  teams: z.array(z.object({
    id: z.string().default(() => crypto.randomUUID()),
    name: z.string(),
    financeCode: z.string(),
    startDate: z.string().optional(),
    endDate: z.string().optional()
  })).optional().default([]),
  contacts: z.array(z.object({
    id: z.string().default(() => crypto.randomUUID()),
    name: z.string(),
    title: z.string().default(''),
    email: z.string().default(''),
    phone: z.string().default(''),
    role: z.string().default(''),
    type: z.enum(['Client', 'Internal']).default('Client')
  })).optional().default([]),
  services: z.array(z.object({
    id: z.string().default(() => crypto.randomUUID()),
    name: z.string(),
    monthlyHours: z.number().min(0)
  })).optional().default([]),
  processes: z.array(z.any()).optional().default([]),
  documents: z.array(z.any()).optional().default([]),
  projects: z.array(z.any()).optional().default([])
});

// Contact schemas
export const insertContactSchema = z.object({
  name: z.string().min(1, 'Name is required'),
  title: z.string().optional(),
  email: z.string().email().optional(),
  phone: z.string().optional(),
  role: z.string().optional(),
  type: z.enum(['Client', 'Internal', 'Vendor', 'Partner', 'Consultant', 'External Stakeholder']).default('Client'),
  customerId: z.string().min(1, 'Customer ID is required')
});

// Team schemas
export const insertTeamSchema = z.object({
  name: z.string().min(1, 'Name is required'),
  financeCode: z.string().min(1, 'Finance code is required'),
  customerId: z.string().min(1, 'Customer ID is required'),
  startDate: z.string().optional(),
  endDate: z.string().optional()
});

// Service schemas
export const insertServiceSchema = z.object({
  name: z.string().min(1, 'Name is required'),
  monthlyHours: z.number().min(0, 'Monthly hours must be non-negative'),
  customerId: z.string().min(1, 'Customer ID is required')
});

// Process schemas - Note: id field is omitted since it's auto-generated by database
export const insertProcessSchema = z.object({
  name: z.string().min(1, 'Name is required'),
  description: z.string().optional(),
  jiraTicket: z.string().optional(),
  status: z.enum(['Not Started', 'In Progress', 'Completed']).default('Not Started'),
  startDate: z.string(),
  dueDate: z.string().optional(),
  endDate: z.string().optional(),
  sdlcStage: z.enum([
    'Requirements',
    'Design',
    'Development',
    'Testing',
    'Deployment',
    'Maintenance'
  ]).default('Requirements'),
  estimate: z.number().min(0).optional(),
  devSprint: z.string().optional(),
  approvalStatus: z.enum(['Pending', 'Approved', 'Rejected', 'Not Required']).default('Not Required'),
  approvedDate: z.string().optional(),
  deployedDate: z.string().optional(),
  functionalArea: z.enum([
    'Standard Data Ingestion',
    'Custom Data Ingestion',
    'Standard Extract',
    'Custom Extract',
    'CRM Refresh',
    'New Team Implementation'
  ]).optional(),
  responsibleContactId: z.string().optional(),
  outputDeliveryMethod: z.enum([
    'Email',
    'SFTP',
    'API',
    'Database',
    'SharePoint',
    'Other'
  ]).optional(),
  outputDeliveryDetails: z.string().optional(),
  customerId: z.string().min(1, 'Customer ID is required'),
  // TPA (Third-Party Agreement) fields
  isTpaRequired: z.boolean().optional().default(false),
  tpaResponsibleContactId: z.string().optional(),
  tpaDataSource: z.string().optional(),
  tpaStartDate: z.string().optional(),
  tpaEndDate: z.string().optional()
}).passthrough() // Allow extra fields to pass through
.refine((data) => {
  // If TPA is required, all TPA fields must be filled
  if (data.isTpaRequired) {
    return data.tpaResponsibleContactId && 
           data.tpaDataSource && 
           data.tpaStartDate && 
           data.tpaEndDate;
  }
  return true;
}, {
  message: "When TPA is required, all TPA fields (responsible contact, data source, start date, and end date) must be provided"
})
.refine((data) => {
  // If both TPA dates are provided, end date must be after or equal to start date
  if (data.tpaStartDate && data.tpaEndDate) {
    return new Date(data.tpaEndDate) >= new Date(data.tpaStartDate);
  }
  return true;
}, {
  message: "TPA end date must be after or equal to TPA start date"
});

// File Transfer schemas
export const insertFileTransferSchema = z.object({
  direction: z.enum(['inbound', 'outbound']),
  connectionType: z.enum(['SFTP', 'ADLS', 'S3', 'FTP', 'HTTP', 'Local']),
  connectionConfig: z.record(z.unknown()).optional().default({}),
  filePattern: z.string().optional(),
  sourcePath: z.string().min(1, 'Source path is required'),
  destinationPath: z.string().optional(),
  scheduleType: z.enum(['manual', 'hourly', 'daily', 'weekly', 'monthly']),
  scheduleConfig: z.record(z.unknown()).optional().default({}),
  isActive: z.boolean().default(true)
});

export const updateFileTransferSchema = insertFileTransferSchema.partial();

// Notification schemas
export const insertNotificationSchema = z.object({
  recipientName: z.string().min(1, 'Recipient name is required'),
  recipientEmail: z.string().email('Invalid email address'),
  recipientRole: z.string().optional(),
  notifyOn: z.record(z.boolean()).optional().default({}),
  isActive: z.boolean().default(true)
});

export const updateNotificationSchema = insertNotificationSchema.partial();

// Document schemas
export const insertDocumentSchema = z.object({
  name: z.string().min(1, 'Name is required'),
  description: z.string().optional(),
  url: z.string().url('Must be a valid URL'),
  type: z.string().min(1, 'Type is required'),
  category: z.enum([
    'Contract',
    'Proposal',
    'Requirements',
    'Design',
    'Technical',
    'Report',
    'Invoice',
    'Other'
  ]).default('Other'),
  size: z.number().min(0).optional(),
  customerId: z.string().min(1, 'Customer ID is required')
});


// Chat session schemas
export const insertAiChatSessionSchema = z.object({
  title: z.string().min(1, 'Title is required'),
  userId: z.string().optional()
});

// Chat message schemas
export const insertAiChatMessageSchema = z.object({
  content: z.string().min(1, 'Content is required'),
  sender: z.enum(['user', 'ai']),
  sessionId: z.string().uuid(),
  timestamp: z.string().optional().default(() => new Date().toISOString()),
  isLoading: z.boolean().optional().default(false)
});

// Communication schemas
export const insertCommunicationSchema = z.object({
  contactId: z.string().min(1, 'Contact ID is required'),
  type: z.enum(['email', 'phone', 'meeting', 'other']),
  subject: z.string().min(1, 'Subject is required'),
  notes: z.string().min(1, 'Notes are required'),
  date: z.string().min(1, 'Date is required')
});


// Process Timeline Event schemas
export const insertProcessTimelineEventSchema = z.object({
  processId: z.string().min(1, 'Process ID is required'),
  stage: z.enum([
    'Requirements',
    'Design',
    'Development',
    'Testing',
    'Deployment',
    'Maintenance'
  ]),
  description: z.string().min(1, 'Description is required'),
  date: z.string().min(1, 'Date is required')
});

// Customer Notes schemas
export const insertCustomerNoteSchema = z.object({
  customerId: z.string().min(1, 'Customer ID is required'),
  noteContent: z.string().min(1, 'Note content is required')
});

// Important Dates schemas
export const insertImportantDateSchema = z.object({
  customerId: z.string().min(1, 'Customer ID is required'),
  description: z.string().min(1, 'Description is required'),
  date: z.string().min(1, 'Date is required')
});

// Update schemas (partial versions of insert schemas)
export const updateCustomerSchema = insertCustomerSchema.partial();
export const updateContactSchema = insertContactSchema.partial();
export const updateTeamSchema = insertTeamSchema.partial();
export const updateServiceSchema = insertServiceSchema.partial();
// Process update schema needs special handling due to refinements
export const updateProcessSchema = z.object({
  name: z.string().min(1, 'Name is required').optional(),
  description: z.string().optional(),
  jiraTicket: z.string().optional(),
  status: z.enum(['Not Started', 'In Progress', 'Completed']).optional(),
  startDate: z.string().optional(),
  dueDate: z.string().optional(),
  endDate: z.string().optional(),
  sdlcStage: z.enum([
    'Requirements',
    'Design',
    'Development',
    'Testing',
    'Deployment',
    'Maintenance'
  ]).optional(),
  estimate: z.number().min(0).optional(),
  devSprint: z.string().optional(),
  approvalStatus: z.enum(['Pending', 'Approved', 'Rejected', 'Not Required']).optional(),
  approvedDate: z.string().optional(),
  deployedDate: z.string().optional(),
  functionalArea: z.enum([
    'Standard Data Ingestion',
    'Custom Data Ingestion',
    'Standard Extract',
    'Custom Extract',
    'CRM Refresh',
    'New Team Implementation'
  ]).optional(),
  responsibleContactId: z.string().optional(),
  outputDeliveryMethod: z.enum([
    'Email',
    'SFTP',
    'API',
    'Database',
    'SharePoint',
    'Other'
  ]).optional(),
  outputDeliveryDetails: z.string().optional(),
  customerId: z.string().optional(),
  // TPA fields
  isTpaRequired: z.boolean().optional(),
  tpaResponsibleContactId: z.string().optional(),
  tpaDataSource: z.string().optional(),
  tpaStartDate: z.string().optional(),
  tpaEndDate: z.string().optional()
}).passthrough()
.refine((data) => {
  // If TPA is required, all TPA fields must be filled
  if (data.isTpaRequired === true) {
    return data.tpaResponsibleContactId && 
           data.tpaDataSource && 
           data.tpaStartDate && 
           data.tpaEndDate;
  }
  return true;
}, {
  message: "When TPA is required, all TPA fields (responsible contact, data source, start date, and end date) must be provided"
})
.refine((data) => {
  // If both TPA dates are provided, end date must be after or equal to start date
  if (data.tpaStartDate && data.tpaEndDate) {
    return new Date(data.tpaEndDate) >= new Date(data.tpaStartDate);
  }
  return true;
}, {
  message: "TPA end date must be after or equal to TPA start date"
});
export const updateDocumentSchema = insertDocumentSchema.partial();
export const updateAiChatSessionSchema = insertAiChatSessionSchema.partial();
export const updateAiChatMessageSchema = insertAiChatMessageSchema.partial();
export const updateCommunicationSchema = insertCommunicationSchema.partial();
export const updateProcessTimelineEventSchema = insertProcessTimelineEventSchema.partial();
export const updateCustomerNoteSchema = z.object({
  noteContent: z.string().min(1, 'Note content is required')
});
export const updateImportantDateSchema = z.object({
  description: z.string().min(1, 'Description is required').optional(),
  date: z.string().min(1, 'Date is required').optional()
}).refine(data => data.description || data.date, {
  message: "At least one field (description or date) must be provided"
});

// Process Task schemas
export const insertProcessTaskSchema = z.object({
  processId: z.string().min(1, 'Process ID is required'),
  parentTaskId: z.string().nullable().optional(),
  title: z.string().min(1, 'Title is required'),
  description: z.string().nullable().optional(),
  status: z.enum(['Not Started', 'In Progress', 'Completed', 'Blocked']).default('Not Started'),
  priority: z.enum(['Low', 'Medium', 'High']).default('Medium'),
  assignedToId: z.string().nullable().optional(),
  dueDate: z.string().nullable().optional(),
  completedDate: z.string().nullable().optional()
});

export const updateProcessTaskSchema = insertProcessTaskSchema.partial();

// Process Milestone schemas
export const insertProcessMilestoneSchema = z.object({
  processId: z.string().min(1, 'Process ID is required'),
  milestoneType: z.enum([
    'Requirements Complete',
    'Requirements Approved Client',
    'Requirements Approved Dev',
    'Estimate Received',
    'Estimate Internal Partner Review',
    'Estimate Internal Approval Received',
    'Sprint(s) Confirmed',
    'Development Started',
    'Development Completed',
    'UAT Started',
    'UAT Approved',
    'Deployment Date',
    'Production Release Date',
    'Process Implementation Complete'
  ]),
  achievedDate: z.string().nullable().optional(),
  notes: z.string().nullable().optional()
});

// Product schemas
export const insertProductSchema = z.object({
  customerId: z.string(),
  name: z.string().min(1, "Name is required"),
  description: z.string().optional(),
  code: z.string().optional(),
  isActive: z.boolean().optional().default(true),
  therapeuticArea: z.enum([
    'Oncology', 'Cardiology', 'Neurology', 'Immunology', 'Infectious Disease',
    'Endocrinology', 'Gastroenterology', 'Respiratory', 'Dermatology',
    'Ophthalmology', 'Psychiatry', 'Rheumatology', 'Rare Disease', 'Other'
  ]).optional(),
  drugClass: z.enum([
    'Monoclonal Antibody', 'Small Molecule', 'Protein Therapeutic', 'Gene Therapy',
    'Cell Therapy', 'Vaccine', 'Biosimilar', 'Combination Therapy',
    'Radiopharmaceutical', 'Medical Device', 'Diagnostic', 'Other'
  ]).optional(),
  indication: z.string().optional(),
  regulatoryStatus: z.enum([
    'Approved', 'Phase III', 'Phase II', 'Phase I', 'Pre-clinical',
    'Discovery', 'Discontinued', 'On Hold'
  ]).optional().default('Pre-clinical')
});

export const updateProductSchema = z.object({
  name: z.string().min(1, "Name is required").optional(),
  description: z.string().optional(),
  code: z.string().optional(),
  isActive: z.boolean().optional(),
  therapeuticArea: z.enum([
    'Oncology', 'Cardiology', 'Neurology', 'Immunology', 'Infectious Disease',
    'Endocrinology', 'Gastroenterology', 'Respiratory', 'Dermatology',
    'Ophthalmology', 'Psychiatry', 'Rheumatology', 'Rare Disease', 'Other'
  ]).optional(),
  drugClass: z.enum([
    'Monoclonal Antibody', 'Small Molecule', 'Protein Therapeutic', 'Gene Therapy',
    'Cell Therapy', 'Vaccine', 'Biosimilar', 'Combination Therapy',
    'Radiopharmaceutical', 'Medical Device', 'Diagnostic', 'Other'
  ]).optional(),
  indication: z.string().optional(),
  regulatoryStatus: z.enum([
    'Approved', 'Phase III', 'Phase II', 'Phase I', 'Pre-clinical',
    'Discovery', 'Discontinued', 'On Hold'
  ]).optional()
}).refine(data => Object.keys(data).length > 0, {
  message: "At least one field must be provided for update"
});

export const assignTeamToProductSchema = z.object({
  teamId: z.string().min(1, "Team ID is required"),
  isPrimary: z.boolean().optional().default(false),
  responsibilityLevel: z.enum(['Primary', 'Secondary', 'Support']).optional().default('Secondary')
});

export const updateProcessMilestoneSchema = insertProcessMilestoneSchema.partial();
