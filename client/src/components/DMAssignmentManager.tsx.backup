/**
 * Data Manager Assignment Management Component
 * Allows admins to manage DM assignments to customers
 */

import React, { useState, useEffect } from 'react';
import { useAuth } from '../contexts/AuthContext';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { Badge } from '@/components/ui/badge';
import { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Textarea } from '@/components/ui/textarea';
import { RoleGuard } from './ProtectedRoute';
import { Loader2, Plus, X, Users, AlertCircle, CheckCircle } from 'lucide-react';

interface User {
  id: string;
  email: string;
  name: string;
  role: string;
}

interface Assignment {
  user_id: string;
  customer_id: string;
  assigned_at: string;
  assigned_by: string;
  notes?: string;
  user: User;
}

interface DMAssignmentManagerProps {
  customerId: string;
  customerName: string;
  onAssignmentChange?: () => void;
}

export const DMAssignmentManager: React.FC<DMAssignmentManagerProps> = ({
  customerId,
  customerName,
  onAssignmentChange,
}) => {
  const { supabase, user } = useAuth();
  const [assignments, setAssignments] = useState<Assignment[]>([]);
  const [availableUsers, setAvailableUsers] = useState<User[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [error, setError] = useState<string>('');
  const [success, setSuccess] = useState<string>('');
  const [isDialogOpen, setIsDialogOpen] = useState(false);
  
  // Form state
  const [selectedUserId, setSelectedUserId] = useState<string>('');
  const [notes, setNotes] = useState<string>('');

  // Load assignments and available users
  useEffect(() => {
    loadData();
  }, [customerId]);

  const loadData = async () => {
    setIsLoading(true);
    setError('');

    try {
      // Load current assignments
      const { data: assignmentData, error: assignmentError } = await supabase
        .from('customer_data_managers')
        .select(`
          *,
          auth.users!user_id (
            id,
            email,
            raw_user_meta_data
          )
        `)
        .eq('customer_id', customerId);

      if (assignmentError) throw assignmentError;

      const formattedAssignments = assignmentData?.map(assignment => ({
        ...assignment,
        user: {
          id: assignment.auth?.users?.id || assignment.user_id,
          email: assignment.auth?.users?.email || 'Unknown',
          name: assignment.auth?.users?.raw_user_meta_data?.name || assignment.auth?.users?.email || 'Unknown',
          role: assignment.auth?.users?.raw_user_meta_data?.role || 'data_manager',
        },
      })) || [];

      setAssignments(formattedAssignments);

      // Load all users for assignment dropdown
      const { data: userData, error: userError } = await supabase
        .from('auth.users')
        .select('id, email, raw_user_meta_data')
        .neq('id', user?.id); // Exclude current user

      if (userError) throw userError;

      const formattedUsers = userData?.map(u => ({
        id: u.id,
        email: u.email,
        name: u.raw_user_meta_data?.name || u.email,
        role: u.raw_user_meta_data?.role || 'data_manager',
      })) || [];

      // Filter out already assigned users
      const assignedUserIds = new Set(formattedAssignments.map(a => a.user_id));
      const unassignedUsers = formattedUsers.filter(u => !assignedUserIds.has(u.id));

      setAvailableUsers(unassignedUsers);
    } catch (err) {
      console.error('Error loading assignment data:', err);
      setError('Failed to load assignment data. Please try again.');
    } finally {
      setIsLoading(false);
    }
  };

  const handleAssignUser = async () => {
    if (!selectedUserId) {
      setError('Please select a user to assign');
      return;
    }

    setIsSubmitting(true);
    setError('');
    setSuccess('');

    try {
      const { error: assignError } = await supabase
        .from('customer_data_managers')
        .insert([{
          customer_id: customerId,
          user_id: selectedUserId,
          assigned_by: user!.id,
          notes: notes.trim() || null,
        }]);

      if (assignError) {
        if (assignError.code === '23505') {
          throw new Error('User is already assigned to this customer');
        }
        throw assignError;
      }

      setSuccess('Data Manager assigned successfully');
      setSelectedUserId('');
      setNotes('');
      setIsDialogOpen(false);
      
      // Reload data and notify parent
      await loadData();
      onAssignmentChange?.();
    } catch (err: any) {
      console.error('Error assigning user:', err);
      setError(err.message || 'Failed to assign Data Manager. Please try again.');
    } finally {
      setIsSubmitting(false);
    }
  };

  const handleRemoveAssignment = async (userId: string, userName: string) => {
    if (!confirm(`Are you sure you want to remove ${userName} from this customer?`)) {
      return;
    }

    setIsSubmitting(true);
    setError('');
    setSuccess('');

    try {
      const { error: removeError } = await supabase
        .from('customer_data_managers')
        .delete()
        .eq('customer_id', customerId)
        .eq('user_id', userId);

      if (removeError) throw removeError;

      setSuccess(`${userName} removed successfully`);
      
      // Reload data and notify parent
      await loadData();
      onAssignmentChange?.();
    } catch (err: any) {
      console.error('Error removing assignment:', err);
      setError(err.message || 'Failed to remove assignment. Please try again.');
    } finally {
      setIsSubmitting(false);
    }
  };

  if (isLoading) {
    return (
      <Card>
        <CardContent className="pt-6">
          <div className="flex items-center justify-center py-8">
            <Loader2 className="h-6 w-6 animate-spin mr-2" />
            <span>Loading assignments...</span>
          </div>
        </CardContent>
      </Card>
    );
  }

  return (
    <RoleGuard allowedRoles={['admin']}>
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Users className="h-5 w-5" />
            Data Manager Assignments
          </CardTitle>
          <CardDescription>
            Manage which Data Managers are assigned to {customerName}
          </CardDescription>
        </CardHeader>
        <CardContent className="space-y-4">
          {error && (
            <Alert variant="destructive">
              <AlertCircle className="h-4 w-4" />
              <AlertDescription>{error}</AlertDescription>
            </Alert>
          )}

          {success && (
            <Alert className="border-green-200 bg-green-50">
              <CheckCircle className="h-4 w-4 text-green-600" />
              <AlertDescription className="text-green-700">{success}</AlertDescription>
            </Alert>
          )}

          {/* Current Assignments */}
          <div className="space-y-2">
            <Label>Current Assignments ({assignments.length})</Label>
            {assignments.length === 0 ? (
              <div className="text-sm text-gray-500 py-4 text-center border border-dashed rounded-lg">
                No Data Managers assigned to this customer
              </div>
            ) : (
              <div className="space-y-2">
                {assignments.map((assignment) => (
                  <div
                    key={assignment.user_id}
                    className="flex items-center justify-between p-3 border rounded-lg"
                  >
                    <div className="flex items-center space-x-3">
                      <div className="w-8 h-8 bg-blue-100 rounded-full flex items-center justify-center">
                        <span className="text-sm font-medium text-blue-700">
                          {assignment.user.name.charAt(0).toUpperCase()}
                        </span>
                      </div>
                      <div>
                        <div className="font-medium">{assignment.user.name}</div>
                        <div className="text-sm text-gray-500">{assignment.user.email}</div>
                        {assignment.notes && (
                          <div className="text-xs text-gray-400 mt-1">{assignment.notes}</div>
                        )}
                      </div>
                      <Badge variant={assignment.user.role === 'admin' ? 'default' : 'secondary'}>
                        {assignment.user.role}
                      </Badge>
                    </div>
                    <Button
                      variant="ghost"
                      size="sm"
                      onClick={() => handleRemoveAssignment(assignment.user_id, assignment.user.name)}
                      disabled={isSubmitting}
                      className="text-red-600 hover:text-red-700 hover:bg-red-50"
                    >
                      <X className="h-4 w-4" />
                    </Button>
                  </div>
                ))}
              </div>
            )}
          </div>

          {/* Add Assignment Dialog */}
          {availableUsers.length > 0 && (
            <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>
              <DialogTrigger asChild>
                <Button className="w-full" disabled={isSubmitting}>
                  <Plus className="h-4 w-4 mr-2" />
                  Assign Data Manager
                </Button>
              </DialogTrigger>
              <DialogContent>
                <DialogHeader>
                  <DialogTitle>Assign Data Manager</DialogTitle>
                  <DialogDescription>
                    Select a Data Manager to assign to {customerName}
                  </DialogDescription>
                </DialogHeader>
                <div className="space-y-4">
                  <div className="space-y-2">
                    <Label htmlFor="user-select">Data Manager</Label>
                    <Select value={selectedUserId} onValueChange={setSelectedUserId}>
                      <SelectTrigger>
                        <SelectValue placeholder="Select a Data Manager" />
                      </SelectTrigger>
                      <SelectContent>
                        {availableUsers.map((user) => (
                          <SelectItem key={user.id} value={user.id}>
                            <div className="flex items-center space-x-2">
                              <span>{user.name}</span>
                              <Badge variant="secondary" className="ml-2">
                                {user.role}
                              </Badge>
                            </div>
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                  </div>

                  <div className="space-y-2">
                    <Label htmlFor="notes">Notes (Optional)</Label>
                    <Textarea
                      id="notes"
                      placeholder="Add any notes about this assignment..."
                      value={notes}
                      onChange={(e) => setNotes(e.target.value)}
                      rows={3}
                    />
                  </div>

                  <div className="flex space-x-2">
                    <Button
                      onClick={handleAssignUser}
                      disabled={isSubmitting || !selectedUserId}
                      className="flex-1"
                    >
                      {isSubmitting ? (
                        <>
                          <Loader2 className="h-4 w-4 animate-spin mr-2" />
                          Assigning...
                        </>
                      ) : (
                        <>
                          <Plus className="h-4 w-4 mr-2" />
                          Assign
                        </>
                      )}
                    </Button>
                    <Button
                      variant="outline"
                      onClick={() => {
                        setIsDialogOpen(false);
                        setSelectedUserId('');
                        setNotes('');
                        setError('');
                      }}
                      disabled={isSubmitting}
                    >
                      Cancel
                    </Button>
                  </div>
                </div>
              </DialogContent>
            </Dialog>
          )}

          {availableUsers.length === 0 && assignments.length > 0 && (
            <div className="text-sm text-gray-500 text-center py-2">
              All available Data Managers are already assigned
            </div>
          )}
        </CardContent>
      </Card>
    </RoleGuard>
  );
};