/**
 * Authentication Context for Supabase
 * Provides authentication state and methods throughout the React app
 */

import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';
import { createClient, User, Session, AuthError } from '@supabase/supabase-js';

// Environment variables for Supabase
const supabaseUrl = import.meta.env.VITE_SUPABASE_URL || '';
const supabaseAnonKey = import.meta.env.VITE_SUPABASE_ANON_KEY || '';

// Debug environment variables
console.log('🔧 Supabase Configuration:', {
  url: supabaseUrl ? `${supabaseUrl.substring(0, 30)}...` : 'NOT SET',
  keyPresent: !!supabaseAnonKey,
  keyLength: supabaseAnonKey?.length || 0,
});

if (!supabaseUrl || !supabaseAnonKey) {
  console.error('❌ Missing Supabase environment variables! Check your .env file.');
}

// Create Supabase client
const supabase = createClient(supabaseUrl, supabaseAnonKey, {
  auth: {
    persistSession: true,
    autoRefreshToken: true,
    detectSessionInUrl: true,
    flowType: 'pkce',
  },
});

interface AuthContextType {
  // State
  user: User | null;
  session: Session | null;
  loading: boolean;
  
  // Supabase client
  supabase: typeof supabase;
  
  // Auth methods
  signIn: (email: string, password: string) => Promise<{ user: User | null; error: AuthError | null }>;
  signUp: (email: string, password: string, metadata?: { name?: string }) => Promise<{ user: User | null; error: AuthError | null }>;
  signOut: () => Promise<{ error: AuthError | null }>;
  resetPassword: (email: string) => Promise<{ error: AuthError | null }>;
  updatePassword: (password: string) => Promise<{ error: AuthError | null }>;
  
  // User data
  getUserRole: () => string | null;
  getUserPermissions: () => Promise<string[]>;
  isAssignedToCustomer: (customerId: string) => Promise<boolean>;
  refreshUser: () => Promise<void>;
  
  // Debug utilities
  clearAuthData: () => void;
  getDebugInfo: () => any;
}

const AuthContext = createContext<AuthContextType | undefined>(undefined);

interface AuthProviderProps {
  children: ReactNode;
}

export const AuthProvider: React.FC<AuthProviderProps> = ({ children }) => {
  const [user, setUser] = useState<User | null>(null);
  const [session, setSession] = useState<Session | null>(null);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    // Get initial session
    const getInitialSession = async () => {
      try {
        console.log('🔍 Getting initial session...');
        console.log('🔍 LocalStorage auth data:', {
          hasAuthData: !!localStorage.getItem('sb-tavkgymcjrrobjircogi-auth-token'),
          authKeys: Object.keys(localStorage).filter(key => key.includes('supabase') || key.includes('auth')),
        });
        
        const { data: { session: initialSession }, error } = await supabase.auth.getSession();
        
        if (error) {
          console.error('❌ Error getting initial session:', error);
          console.error('Error details:', {
            message: error.message,
            status: error.status,
            name: error.name,
          });
        } else {
          console.log('✅ Initial session check complete:', {
            sessionExists: !!initialSession,
            userEmail: initialSession?.user?.email,
            userId: initialSession?.user?.id,
          });
          setSession(initialSession);
          setUser(initialSession?.user ?? null);
        }
      } catch (error) {
        console.error('💥 Error in getInitialSession:', error);
      } finally {
        setLoading(false);
      }
    };

    getInitialSession();

    // Listen for auth changes
    const { data: { subscription } } = supabase.auth.onAuthStateChange(
      async (event, newSession) => {
        console.log('🔄 Auth state changed:', event, {
          userEmail: newSession?.user?.email,
          userId: newSession?.user?.id,
          sessionExists: !!newSession,
          userMetadata: newSession?.user?.user_metadata,
        });
        
        setSession(newSession);
        setUser(newSession?.user ?? null);
        
        if (event === 'SIGNED_IN' || event === 'TOKEN_REFRESHED') {
          console.log('✅ User signed in or token refreshed');
        } else if (event === 'SIGNED_OUT') {
          console.log('👋 User signed out');
        } else if (event === 'INITIAL_SESSION') {
          console.log('🔍 Initial session check:', newSession ? 'Session found' : 'No session found');
        }
        
        setLoading(false);
      }
    );

    return () => {
      subscription.unsubscribe();
    };
  }, []);

  const signIn = async (email: string, password: string) => {
    try {
      setLoading(true);
      console.log('🔐 Starting sign-in process...', { email });
      
      const { data, error } = await supabase.auth.signInWithPassword({
        email,
        password,
      });
      
      if (error) {
        console.error('❌ Sign-in error:', error);
        console.error('Error details:', {
          message: error.message,
          status: error.status,
          name: error.name,
        });
      } else {
        console.log('✅ Sign-in successful:', {
          userId: data.user?.id,
          email: data.user?.email,
        });
      }
      
      return { user: data.user, error };
    } catch (error) {
      console.error('💥 Unexpected sign-in error:', error);
      return { user: null, error: error as AuthError };
    } finally {
      setLoading(false);
    }
  };

  const signUp = async (email: string, password: string, metadata?: { name?: string }) => {
    try {
      setLoading(true);
      console.log('🔐 Starting user registration...', { email, metadata });
      
      const { data, error } = await supabase.auth.signUp({
        email,
        password,
        options: {
          data: metadata || {},
        },
      });
      
      if (error) {
        console.error('❌ Registration error:', error);
        console.error('Error details:', {
          message: error.message,
          status: error.status,
          name: error.name,
        });
      } else {
        console.log('✅ Registration successful:', {
          userId: data.user?.id,
          email: data.user?.email,
          confirmationSentAt: data.user?.confirmation_sent_at,
        });
      }
      
      return { user: data.user, error };
    } catch (error) {
      console.error('💥 Unexpected registration error:', error);
      return { user: null, error: error as AuthError };
    } finally {
      setLoading(false);
    }
  };

  const signOut = async () => {
    try {
      setLoading(true);
      const { error } = await supabase.auth.signOut();
      return { error };
    } catch (error) {
      return { error: error as AuthError };
    } finally {
      setLoading(false);
    }
  };

  const resetPassword = async (email: string) => {
    try {
      const { error } = await supabase.auth.resetPasswordForEmail(email, {
        redirectTo: `${window.location.origin}/reset-password`,
      });
      return { error };
    } catch (error) {
      return { error: error as AuthError };
    }
  };

  const updatePassword = async (password: string) => {
    try {
      const { error } = await supabase.auth.updateUser({ password });
      return { error };
    } catch (error) {
      return { error: error as AuthError };
    }
  };

  const getUserRole = (): string | null => {
    return user?.user_metadata?.role || 'data_manager';
  };

  const getUserPermissions = async (): Promise<string[]> => {
    if (!user) return [];
    
    try {
      const { data, error } = await supabase
        .from('user_roles')
        .select('permissions')
        .eq('id', user.user_metadata?.role_id)
        .single();
      
      if (error || !data) return ['view_all'];
      
      return Object.keys(data.permissions || {});
    } catch (error) {
      console.error('Error fetching user permissions:', error);
      return ['view_all'];
    }
  };

  const isAssignedToCustomer = async (customerId: string): Promise<boolean> => {
    if (!user) return false;
    
    try {
      const { data, error } = await supabase
        .from('customer_data_managers')
        .select('user_id')
        .eq('user_id', user.id)
        .eq('customer_id', customerId)
        .single();
      
      return !error && !!data;
    } catch (error) {
      console.error('Error checking customer assignment:', error);
      return false;
    }
  };

  const refreshUser = async (): Promise<void> => {
    try {
      const { data: { user: refreshedUser }, error } = await supabase.auth.getUser();
      if (!error && refreshedUser) {
        setUser(refreshedUser);
      }
    } catch (error) {
      console.error('Error refreshing user:', error);
    }
  };

  // Debug utilities
  const clearAuthData = () => {
    console.log('🗑️ Clearing all auth data...');
    localStorage.clear();
    sessionStorage.clear();
    supabase.auth.signOut();
    console.log('✅ Auth data cleared');
  };

  const getDebugInfo = () => {
    return {
      user: user ? { id: user.id, email: user.email } : null,
      session: session ? { user: session.user?.email, expires: session.expires_at } : null,
      loading,
      localStorageKeys: Object.keys(localStorage).filter(key => 
        key.includes('supabase') || key.includes('auth')
      ),
    };
  };

  const value: AuthContextType = {
    user,
    session,
    loading,
    supabase,
    signIn,
    signUp,
    signOut,
    resetPassword,
    updatePassword,
    getUserRole,
    getUserPermissions,
    isAssignedToCustomer,
    refreshUser,
    clearAuthData,
    getDebugInfo,
  };

  return (
    <AuthContext.Provider value={value}>
      {children}
    </AuthContext.Provider>
  );
};

export const useAuth = (): AuthContextType => {
  const context = useContext(AuthContext);
  if (context === undefined) {
    throw new Error('useAuth must be used within an AuthProvider');
  }
  return context;
};

export default supabase;