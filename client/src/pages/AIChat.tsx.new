import { useState, useRef, useEffect } from "react";
import { Card, CardContent } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { useQuery, useMutation, useQueryClient } from "@tanstack/react-query";
import { Bot, Send, User, Plus, MessageSquare, Settings } from "lucide-react";
import { apiRequest } from "@/lib/queryClient";
import { useToast } from "@/hooks/use-toast";
import { AIConfig } from "@/components/AIConfig";

// Hard-coded chat session to bypass database issues
const MOCK_SESSION = {
  id: "mock-session-123",
  title: "AI Assistant Chat",
  createdAt: new Date().toISOString(),
  updatedAt: new Date().toISOString()
};

// Simple chat message type
interface ChatMessage {
  id: string;
  content: string;
  sender: 'user' | 'ai';
  timestamp: string;
}

export default function AIChat() {
  const [messageInput, setMessageInput] = useState("");
  const [configOpen, setConfigOpen] = useState(false);
  const [messages, setMessages] = useState<ChatMessage[]>([]);
  const messagesEndRef = useRef<HTMLDivElement>(null);
  const { toast } = useToast();

  const handleSendMessage = async () => {
    if (!messageInput.trim()) return;

    // Add user message
    const userMessage: ChatMessage = {
      id: `user-${Date.now()}`,
      content: messageInput,
      sender: 'user',
      timestamp: new Date().toISOString()
    };
    
    setMessages(prev => [...prev, userMessage]);
    setMessageInput("");
    
    // Simulate AI response
    setTimeout(() => {
      const responses = [
        "The CRM system allows you to manage customers, including their contacts, processes, and associated documents.",
        "Based on your customer data, I can provide insights about trends, process efficiency, and potential opportunities.",
        "I have access to your customer information, processes, and timeline data. How can I assist you today?",
        "Let me analyze your current customer relationships and processes to provide you with actionable insights.",
      ];
      
      const randomResponse = responses[Math.floor(Math.random() * responses.length)];
      
      const aiMessage: ChatMessage = {
        id: `ai-${Date.now()}`,
        content: randomResponse,
        sender: 'ai',
        timestamp: new Date().toISOString()
      };
      
      setMessages(prev => [...prev, aiMessage]);
    }, 1000);
  };

  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
  }, [messages]);

  return (
    <div className="max-w-7xl mx-auto px-6 py-8">
      <div className="grid grid-cols-1 lg:grid-cols-4 gap-6 h-[calc(100vh-12rem)]">
        {/* Sidebar */}
        <div className="lg:col-span-1">
          <Card className="h-full">
            <CardContent className="p-4">
              <div className="flex items-center justify-between mb-4">
                <h3 className="font-semibold text-neutral-800">Chat Sessions</h3>
              </div>

              <div className="space-y-2">
                <Button
                  variant="default"
                  className="w-full justify-start h-auto p-3"
                >
                  <MessageSquare className="mr-2" size={16} />
                  <div className="flex-1 text-left">
                    <div className="font-medium truncate">
                      {MOCK_SESSION.title}
                    </div>
                    <div className="text-xs text-muted-foreground">
                      {new Date(MOCK_SESSION.createdAt).toLocaleDateString()}
                    </div>
                  </div>
                </Button>
              </div>
            </CardContent>
          </Card>
        </div>

        {/* Chat Area */}
        <div className="lg:col-span-3">
          <Card className="h-full flex flex-col">
            {/* Chat Header */}
            <div className="p-4 border-b border-neutral-200">
              <div className="flex items-center justify-between">
                <div className="flex items-center space-x-2">
                  <div className="w-8 h-8 bg-accent/10 rounded-full flex items-center justify-center">
                    <Bot className="text-accent" size={16} />
                  </div>
                  <h3 className="font-medium text-neutral-800">AI Assistant</h3>
                </div>
                <Button variant="ghost" size="sm" onClick={() => setConfigOpen(true)}>
                  <Settings size={16} />
                </Button>
              </div>
            </div>

            {/* Messages */}
            <div className="flex-1 overflow-y-auto p-4 space-y-4">
              {messages.length === 0 && (
                <div className="text-center py-12">
                  <Bot className="w-12 h-12 text-neutral-400 mx-auto mb-4" />
                  <p className="text-neutral-600">
                    Send a message to start chatting with the AI assistant.
                  </p>
                </div>
              )}
              
              {messages.map((message) => (
                <div
                  key={message.id}
                  className={`flex space-x-3 ${
                    message.sender === "user" ? "justify-end" : "justify-start"
                  }`}
                >
                  {message.sender === "ai" && (
                    <div className="w-8 h-8 bg-accent/10 rounded-full flex items-center justify-center flex-shrink-0">
                      <Bot className="text-accent" size={16} />
                    </div>
                  )}
                  
                  <div
                    className={`max-w-xs lg:max-w-md px-4 py-2 rounded-lg ${
                      message.sender === "user"
                        ? "bg-primary text-primary-foreground"
                        : "bg-neutral-100 text-neutral-800"
                    }`}
                  >
                    <p className="text-sm">{message.content}</p>
                    <p className="text-xs opacity-70 mt-1">
                      {new Date(message.timestamp).toLocaleTimeString()}
                    </p>
                  </div>

                  {message.sender === "user" && (
                    <div className="w-8 h-8 bg-primary/10 rounded-full flex items-center justify-center flex-shrink-0">
                      <User className="text-primary" size={16} />
                    </div>
                  )}
                </div>
              ))}
              
              <div ref={messagesEndRef} />
            </div>

            {/* Message Input */}
            <div className="p-4 border-t border-neutral-200">
              <div className="flex space-x-2">
                <Input
                  placeholder="Ask me anything about your CRM data..."
                  value={messageInput}
                  onChange={(e) => setMessageInput(e.target.value)}
                  onKeyDown={(e) => {
                    if (e.key === "Enter" && !e.shiftKey) {
                      e.preventDefault();
                      handleSendMessage();
                    }
                  }}
                />
                <Button
                  onClick={handleSendMessage}
                  disabled={!messageInput.trim()}
                >
                  <Send size={16} />
                </Button>
              </div>
            </div>
          </Card>
        </div>
      </div>

      {/* AI Configuration Dialog */}
      <AIConfig open={configOpen} onOpenChange={setConfigOpen} />
    </div>
  );
}
